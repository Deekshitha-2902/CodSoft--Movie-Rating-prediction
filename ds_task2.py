# -*- coding: utf-8 -*-
"""DS_task2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CMdicpL_ojbpb_ZnXIEnMCJKnJDyPM9h
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.feature_extraction.text import TfidfVectorizer

# Load your movie dataset (replace 'your_dataset.csv' with your actual file)
movie_data = pd.read_csv('/content/drive/MyDrive/IMDb Movies India.csv', encoding='latin1')

# Display the first few rows of the dataset
print(movie_data.head())

# Drop unnecessary columns (modify as needed)
if 'movie_id' in movie_data.columns and 'title' in movie_data.columns:
    movie_data = movie_data.drop(['movie_id', 'title'], axis=1)
else:
    print("Columns 'movie_id' and 'title' not found in the DataFrame.")

# Separate features and target variable
if 'rating' in movie_data.columns:
    # Separate features and target variable
    X = movie_data.drop('rating', axis=1)
    y = movie_data['rating']

    # Continue with the rest of your code...

    # Split the data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Define preprocessing for numeric and categorical features
    # (Rest of your preprocessing code...)

    # Create a Random Forest Regressor model
    model = RandomForestRegressor(random_state=42)

    # Create the full pipeline with preprocessing and the regressor
    pipeline = Pipeline(steps=[('preprocessor', preprocessor),
                                 ('regressor', model)])

    # Train the model using the pipeline
    pipeline.fit(X_train, y_train)

    # Make predictions on the test set
    predictions = pipeline.predict(X_test)

    # Evaluate the model
    mse = mean_squared_error(y_test, predictions)
    print(f'Mean Squared Error: {mse}')

else:
    print("Column 'rating' not found in the DataFrame.")
# Check if 'rating' is present in the DataFrame
if 'rating' in movie_data.columns:
    # Separate features and target variable
    X = movie_data.drop('rating', axis=1)
    y = movie_data['rating']

    # Display the column names
    print(X.columns)

    # Split the data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Define preprocessing for numeric and categorical features
    numeric_features = X.select_dtypes(include=['int64', 'float64']).columns
    categorical_features = X.select_dtypes(include=['object']).columns

    numeric_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy='mean'))
    ])

    text_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy='constant', fill_value='')),
        ('vectorizer', TfidfVectorizer())  # Use TfidfVectorizer for text data
    ])

    categorical_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy='most_frequent')),
        ('onehot', OneHotEncoder(handle_unknown='ignore'))
    ])

    preprocessor = ColumnTransformer(
        transformers=[
            ('num', numeric_transformer, numeric_features),
            ('text', text_transformer, 'actors'),  # Assuming 'actors' is a column with actors' names
            ('cat', categorical_transformer, categorical_features)
        ])

    # Create a Random Forest Regressor model
    model = RandomForestRegressor(random_state=42)

    # Create the full pipeline with preprocessing and the regressor
    pipeline = Pipeline(steps=[('preprocessor', preprocessor),
                                 ('regressor', model)])

    # Train the model using the pipeline
    pipeline.fit(X_train, y_train)

    # Make predictions on the test set
    predictions = pipeline.predict(X_test)

    # Evaluate the model
    mse = mean_squared_error(y_test, predictions)
    print(f'Mean Squared Error: {mse}')

else:
    print("Column 'rating' not found in the DataFrame.")